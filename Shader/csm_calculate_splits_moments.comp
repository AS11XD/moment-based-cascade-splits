#version 430
#define Complex vec2
#define NUM_MOMENTS 8

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 4) buffer splitVector
{
	vec2 splits[];
};
uniform int MAX_CASCADES;

uniform float near;
uniform float far;
uniform float height;
uniform float moment_bias;
uniform vec2 aspect;
uniform sampler2D reducedImg;
uniform sampler2D reducedImg2;
uniform sampler2D reducedImgMinMaxOnes;
uniform bool one_reduce_only;

Complex complexMult(Complex a, Complex b) {
	return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

Complex complexDiv(Complex a, Complex b) {
	return Complex(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)));
}

Complex complexSqrt(Complex a) {
	if (a.x == 0.0 && a.y == 0.0)
		return Complex(0.0);
    float x = abs(a.x);
    float y = abs(a.y);
    float l = min(x, y);
    x = max(x, y);
    l = l / x;
    float k = x * sqrt(1.0 + l * l);
    float t = sqrt(2.0 * (k + (a.x >= 0.0 ? a.x : -a.x)));
    vec2 f = vec2(0.5 * t, abs(a.y) / t);

    if (a.x < 0.0) f.xy = f.yx;
    if (a.y < 0.0) f.y = -f.y;

    return f;
}

Complex laguerre(Complex a[8], float x) {
	Complex nx = Complex(x, 0.0);
    int mr = 8;
    int mt = 10;
    int maxit = mt * mr;
    float eps = 0.0000001;
    float frac[] = { 0.0, 0.5, 0.25, 0.75, 0.13, 0.38, 0.62, 0.88, 1.0 };
    int m;
    for (m = 7; m >= 0; m--) 
        if (a[m] != Complex(0.0))
            break;
    Complex dx, x1, b, d, f, g, h, sq, gp, gm, g2;
    for (int itter = 1; itter <= maxit; itter++) {
        int its = itter;
        b = a[m];
		d = Complex(0.0);
		f = Complex(0.0);
        float err = length(b);
        float abx = length(nx);
        for (int j = m - 1; j >= 0; j--) {
			f = complexMult(nx, f) + d;
            d = complexMult(nx, d) + b;
            b = complexMult(nx, b) + a[j];
            err = length(b) + abx * err;
        }

        err *= eps;
		if (length(b) <= err)
			return nx;

        g = complexDiv(d, b);
        g2 = complexMult(g, g);
        h = g2 - complexDiv(f, b) * 2.0;
        sq = complexSqrt((h * float(m) - g2) * float(m - 1));

        gp = g + sq;
        gm = g - sq;
        float abp = length(gp);
        float abm = length(gm);
        if (abp < abm)
            gp = gm;

        dx = (max(abp, abm) > 0.0) ? complexDiv(Complex(float(m), 0.0), gp) : Complex((1.0 + abx) * cos(float(itter)), (1.0 + abx) * sin(float(itter)));

        x1 = nx - dx;
		if (nx == x1)
			return nx;

		if (itter % mt != 0) {
			nx = x1;
		}
		else {
			nx = nx - dx * frac[itter / mt];
		}
    }
    return nx;
}

void poldiv(out Complex q[8], Complex u[8], Complex v[8]) {
	q[0] = Complex(0.0);
	q[1] = Complex(0.0);
	q[2] = Complex(0.0);
	q[3] = Complex(0.0);
	q[4] = Complex(0.0);
	q[5] = Complex(0.0);
	q[6] = Complex(0.0);
	q[7] = Complex(0.0);

	int n;
	for (n = 7; n >= 0; n--)
		if (u[n] != Complex(0.0))
			break;
	int nv;
	for (nv = 7; nv >= 0; nv--)
		if (v[nv] != Complex(0.0))
			break;

	Complex r[8];
	for (int i = 0; i < 8; i++)
		r[i] = u[i];

	if (nv < 0) {
		return;
	}

	for (int k = n - nv; k >= 0; k--) {
		q[k] = complexDiv(r[nv + k], v[nv]);
		for (int j = nv + k - 1; j >= k; j--) {
			r[j] -= complexMult(q[k], v[j - k]);
		}
	}

	for (int h = nv; h <= n; h++)
		r[h] = Complex(0.0);
}

void findRoots(out Complex solutions[7], Complex a[8]) {
	solutions[0] = Complex(0.0);
	solutions[1] = Complex(0.0);
	solutions[2] = Complex(0.0);
	solutions[3] = Complex(0.0);
	solutions[4] = Complex(0.0);
	solutions[5] = Complex(0.0);
	solutions[6] = Complex(0.0);

	Complex b[8];
	for (int i = 0; i < 8; i++)
		b[i] = a[i];

	int n;
	for (n = 7; n >= 0; n--)
		if (a[n] != Complex(0.0))
			break;
			
	for (int i = 0; i < n; i++) {
		
		Complex v = laguerre(b, 0.5);
		solutions[i] = v;
		
		if (i < n - 1) {
			Complex c[8];
			c[0] = v * (-1.0);
			c[1] = Complex(1.0, 0.0);
			c[2] = Complex(0.0);
			c[3] = Complex(0.0);
			c[4] = Complex(0.0);
			c[5] = Complex(0.0);
			c[6] = Complex(0.0);
			c[7] = Complex(0.0);
			
			Complex d[8];
			poldiv(d, b, c);
			for (int l = 0; l < 8; l++) {
				b[l] = d[l];
			}
		}
	}
}

Complex evalPol8(Complex a[8], Complex x) {
	Complex val = Complex(0.0);
	Complex k[8];
	k[0] = Complex(1.0, 0.0);
	k[1] = x;
	for (int i = 2; i < 8; i++)
		k[i] = complexMult(k[i-1], x);

	for (int i = 0; i < 8; i++)
		val += complexMult(a[i], k[i]);

	return val;
}

Complex evalPol7(Complex a[7], Complex x) {
	Complex k[7];
	k[0] = Complex(1.0, 0.0);
	k[1] = x;
	for (int i = 2; i < 7; i++)
		k[i] = k[i - 1] * x;

	Complex val = Complex(0.0);
	for (int i = 0; i < 7; i++) 
		val = val + (a[i] * k[i]);

	return val;
}


void derivPol(out Complex res[7], Complex a[8]) {
	for (int i = 0; i < 7; i++) {
		res[i] = a[i + 1] * float(i + 1);
	}
}

float mad(float a, float b, float c) {
	return a * b + c;
}

void matrixmult(out float result[5][5], float a[5][5], float b[5][5]) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			result[i][j] = a[i][0] * b[0][j];
		}
	}

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			for (int k = 1; k < 5; k++) {
				result[i][j] += a[i][k] * b[k][j];
			}
		}
	}
}

void transpose5x5(out float result[5][5], float a[5][5]) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			result[i][j] = a[j][i];
		}
	}
}

vec2 solveQuadratic(vec3 coeffs)
{
	coeffs.y *= 0.5;

	float x1, x2, tmp;

	tmp = (coeffs.y * coeffs.y - coeffs.x * coeffs.z);
	if (coeffs.y >= 0) {
		tmp = sqrt(tmp);
		x1 = (-coeffs.z) / (coeffs.y + tmp);
		x2 = (-coeffs.y - tmp) / coeffs.x;
	}
	else {
		tmp = sqrt(tmp);
		x1 = (-coeffs.y + tmp) / coeffs.x;
		x2 = coeffs.z / (-coeffs.y + tmp);
	}
	return vec2(x1, x2);
}

float solveCubicBlinnSmallest(vec4 coeffs)
{
	coeffs.x /= coeffs.w;
	coeffs.y /= coeffs.w;
	coeffs.z /= coeffs.w;
	coeffs.y /= 3.0;
	coeffs.z /= 3.0;

	vec3 delta = vec3(mad(-coeffs.z, coeffs.z, coeffs.y), mad(-coeffs.z, coeffs.y, coeffs.x), coeffs.z * coeffs.x - coeffs.y * coeffs.y);
	float discriminant = 4.0 * delta.x * delta.z - delta.y * delta.y;

	vec2 depressed = vec2(delta.z, -coeffs.x * delta.y + 2.0 * coeffs.y * delta.z);
	float theta = abs(atan(coeffs.x * sqrt(discriminant), -depressed.y)) / 3.0;
	vec2 sin_cos = vec2(sin(theta), cos(theta));
	float tmp = 2.0 * sqrt(-depressed.x);
	vec2 x = vec2(tmp * sin_cos.y, tmp * (-0.5 * sin_cos.y - 0.5 * sqrt(3.0) * sin_cos.x));
	vec2 s = (x.x + x.y < 2.0 * coeffs.y) ? vec2(-coeffs.x, x.x + coeffs.y) : vec2(-coeffs.x, x.y + coeffs.y);

	return  s.x / s.y;
}

vec4 solveQuarticNeumark(in float coeffs[5])
{
	// Normalization
	float B = coeffs[3] / coeffs[4];
	float C = coeffs[2] / coeffs[4];
	float D = coeffs[1] / coeffs[4];
	float E = coeffs[0] / coeffs[4];

	// Compute coefficients of the cubic resolvent
	float P = -2.0 * C;
	float Q = C * C + B * D - 4.0 * E;
	float R = D * D + B * B * E - B * C * D;

	// Obtain the smallest cubic root
	float y = solveCubicBlinnSmallest(vec4(R, Q, P, 1.0));

	float BB = B * B;
	float fy = 4.0 * y;
	float BB_fy = BB - fy;

	float Z = C - y;
	float ZZ = Z * Z;
	float fE = 4.0 * E;
	float ZZ_fE = ZZ - fE;

	float G, g, H, h;
	// Compute the coefficients of the quadratics adaptively using the two 
	// proposed factorizations by Neumark. Choose the appropriate 
	// factorizations using the heuristic proposed by Herbison-Evans.
	if (y < 0 || (ZZ + fE) * BB_fy > ZZ_fE* (BB + fy)) {
		float tmp = sqrt(BB_fy);
		G = (B + tmp) * 0.5;
		g = (B - tmp) * 0.5;

		tmp = (B * Z - 2.0 * D) / (2.0 * tmp);
		H = mad(Z, 0.5, tmp);
		h = mad(Z, 0.5, -tmp);
	}
	else {
		float tmp = sqrt(ZZ_fE);
		H = (Z + tmp) * 0.5;
		h = (Z - tmp) * 0.5;

		tmp = (B * Z - 2.0 * D) / (2.0 * tmp);
		G = mad(B, 0.5, tmp);
		g = mad(B, 0.5, -tmp);
	}
	// Solve the quadratics
	return vec4(solveQuadratic(vec3(1.0, G, H)), solveQuadratic(vec3(1.0, g, h)));
}

float approxArea(float l[5][5], float d[5][5], vec4 m1, float x1, float overestimation) {
	float z[5];
	z[0] = x1;

	// Construct the polynomial whose roots have to be points of support of the
	// Canonical distribution:
	// bz = (1,z[0],z[0]^2,z[0]^3,z[0]^4)^T
	float c[5];
	c[0] = 1.0;
	c[1] = z[0];
	c[2] = c[1] * z[0];
	c[3] = c[2] * z[0];
	c[4] = c[3] * z[0];

	// Forward substitution to solve L*c1 = bz
	c[1] -= m1.x;
	c[2] -= mad(l[2][1], c[1], m1.y);
	c[3] -= m1.z + (l[3][1] * c[1] + l[3][2] * c[2]);
	c[4] -= m1.w + (l[4][1] * c[1] + l[4][2] * c[2] + l[4][3] * c[3]);

	// Scaling to solve D*c2 = c1
	//c = c .*[1, InvD22, InvD33, InvD44, InvD55];
	c[1] *= 1.0 / d[1][1];
	c[2] *= 1.0 / d[2][2];
	c[3] *= 1.0 / d[3][3];
	c[4] *= 1.0 / d[4][4];

	// Backward substitution to solve L^T*c3 = c2
	c[3] -= l[4][3] * c[4];
	c[2] -= l[4][2] * c[4] + l[3][2] * c[3];
	c[1] -= l[4][1] * c[4] + l[3][1] * c[3] + l[2][1] * c[2];
	c[0] -= m1.w * c[4] + m1.z * c[3] + m1.y * c[2] + m1.x * c[1];

	// Solve the quartic equation
	vec4 zz = solveQuarticNeumark(c);
	z[1] = zz.x;
	z[2] = zz.y;
	z[3] = zz.z;
	z[4] = zz.w;

	// Compute the absorbance by summing the appropriate weights
	vec4 weigth_factor = vec4(z[1] <= z[0], z[2] <= z[0], z[3] <= z[0], z[4] <= z[0]);
	// Construct an interpolation polynomial
	float f0 = overestimation;
	float f1 = weigth_factor.x;
	float f2 = weigth_factor.y;
	float f3 = weigth_factor.z;
	float f4 = weigth_factor.w;
	float f01 = (f1 - f0) / (z[1] - z[0]);
	float f12 = (f2 - f1) / (z[2] - z[1]);
	float f23 = (f3 - f2) / (z[3] - z[2]);
	float f34 = (f4 - f3) / (z[4] - z[3]);
	float f012 = (f12 - f01) / (z[2] - z[0]);
	float f123 = (f23 - f12) / (z[3] - z[1]);
	float f234 = (f34 - f23) / (z[4] - z[2]);
	float f0123 = (f123 - f012) / (z[3] - z[0]);
	float f1234 = (f234 - f123) / (z[4] - z[1]);
	float f01234 = (f1234 - f0123) / (z[4] - z[0]);

	float Polynomial_0;
	vec4 Polynomial;
	// f0123 + f01234 * (z - z3)
	Polynomial_0 = mad(-f01234, z[3], f0123);
	Polynomial.x = f01234;
	// * (z - z2) + f012
	Polynomial.y = Polynomial.x;
	Polynomial.x = mad(-Polynomial.x, z[2], Polynomial_0);
	Polynomial_0 = mad(-Polynomial_0, z[2], f012);
	// * (z - z1) + f01
	Polynomial.z = Polynomial.y;
	Polynomial.y = mad(-Polynomial.y, z[1], Polynomial.x);
	Polynomial.x = mad(-Polynomial.x, z[1], Polynomial_0);
	Polynomial_0 = mad(-Polynomial_0, z[1], f01);
	// * (z - z0) + f1
	Polynomial.w = Polynomial.z;
	Polynomial.z = mad(-Polynomial.z, z[0], Polynomial.y);
	Polynomial.y = mad(-Polynomial.y, z[0], Polynomial.x);
	Polynomial.x = mad(-Polynomial.x, z[0], Polynomial_0);
	Polynomial_0 = mad(-Polynomial_0, z[0], f0);
	float absorbance = Polynomial_0 + dot(Polynomial, vec4(m1.x, m1.y, m1.z, m1.w));

	return absorbance;
}

float rtbis(float l[5][5], float d[5][5], vec4 m1, float x1, float x2, float xacc, float at) {
		int JMAX = 50;
	float f = approxArea(l, d, m1, x1, 0.5) - at;
	float fmid = approxArea(l, d, m1, x2, 0.5) - at;
	if (f * fmid >= 0.0) {
		return 0.0;
	}
	
	float dx, rtb, xmid;

	if (f < 0.0) {
		dx = x2 - x1;
		rtb = x1;
	}
	else {
		dx = x1 - x2;
		rtb = x2;
	}
	for (int j = 0; j < JMAX; j++) {
		dx *= 0.5;
		xmid = rtb + dx;
		fmid = approxArea(l, d, m1, xmid, 0.5) - at;
		if (fmid <= 0.0)
			rtb = xmid;

		if ((abs(dx) < xacc) || (fmid == 0.0))
			return rtb;
	}
	return rtb;
}

void computeCholeskey(vec4 m1, vec4 m2, out float l[5][5], out float d[5][5]) {
	// Compute a Cholesky factorization of the Hankel matrix B storing only non-trivial entries or related products
	float D11 = mad(-m1.x, m1.x, m1.y);
	float InvD11 = 1.0 / D11;
	float L21D11 = mad(-m1.y, m1.x, m1.z);
	float L21 = L21D11 * InvD11;
	float L31D11 = mad(-m1.z, m1.x, m1.w);
	float L31 = L31D11 * InvD11;
	float L41D11 = mad(-m1.w, m1.x, m2.x);
	float L41 = L41D11 * InvD11;

	float D22 = mad(-L21, L21D11, mad(-m1.y, m1.y, m1.w));
	float InvD22 = 1.0 / D22;
	float L32D22 = mad(-L31, L21D11, mad(-m1.z, m1.y, m2.x));
	float L32 = L32D22 * InvD22;
	float L42D22 = mad(-L41, L21D11, mad(-m1.w, m1.y, m2.y));
	float L42 = L42D22 * InvD22;

	float D33 = mad(-m1.z, m1.z, m2.y) - (L31 * L31D11 + L32 * L32D22);
	float InvD33 = 1.0 / D33;
	float L43D33 = mad(-m1.w, m1.z, m2.z) - (L41 * L31D11 + L42 * L32D22);
	float L43 = L43D33 * InvD33;

	float D44 = mad(-m1.w, m1.w, m2.w) - (L41 * L41D11 + L42 * L42D22 + L43 * L43D33);
	float InvD44 = 1.0 / D44;

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			d[i][j] = 0.0;
		}
	}
	d[0][0] = 1.0;
	d[1][1] = D11;
	d[2][2] = D22;
	d[3][3] = D33;
	d[4][4] = D44;

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			l[i][j] = 0.0;
		}
	}
	l[0][0] = 1.0;
	l[1][1] = 1.0;
	l[2][2] = 1.0;
	l[3][3] = 1.0;
	l[4][4] = 1.0;

	l[1][0] = m1.x;
	l[2][0] = m1.y;
	l[3][0] = m1.z;
	l[4][0] = m1.w;
	l[2][1] = L21;
	l[3][1] = L31;
	l[3][2] = L32;
	l[4][1] = L41;
	l[4][2] = L42;
	l[4][3] = L43;
}

void computeInvHankel(out float inv_hankel[5][5], float l[5][5], float d[5][5]) {

	float InvL10 = -l[1][0];
	float InvL20 = -l[2][0] + (-InvL10) * l[2][1];
	float InvL21 = -l[2][1];
	float InvL30 = -l[3][0] + (-InvL10) * l[3][1] + (-InvL20) * l[3][2];
	float InvL31 = -l[3][1] + (-InvL21) * l[3][2];
	float InvL32 = -l[3][2];
	float InvL40 = -l[4][0] + (-InvL10) * l[4][1] + (-InvL20) * l[4][2] + (-InvL30) * l[4][3];
	float InvL41 = -l[4][1] + (-InvL21) * l[4][2] + (-InvL31) * l[4][3];
	float InvL42 = -l[4][2] + (-InvL32) * l[4][3];
	float InvL43 = -l[4][3];

	float inv_l[5][5];
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			inv_l[i][j] = 0.0;
		}
	}
	inv_l[0][0] = 1.0;
	inv_l[1][1] = 1.0;
	inv_l[2][2] = 1.0;
	inv_l[3][3] = 1.0;
	inv_l[4][4] = 1.0;

	inv_l[1][0] = InvL10;
	inv_l[2][0] = InvL20;
	inv_l[2][1] = InvL21;
	inv_l[3][0] = InvL30;
	inv_l[3][1] = InvL31;
	inv_l[3][2] = InvL32;
	inv_l[4][0] = InvL40;
	inv_l[4][1] = InvL41;
	inv_l[4][2] = InvL42;
	inv_l[4][3] = InvL43;

	float inv_d[5][5];
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			inv_d[i][j] = 0.0;
		}
	}
	inv_d[0][0] = 1.0;
	inv_d[1][1] = 1.0 / d[1][1];
	inv_d[2][2] = 1.0 / d[2][2];
	inv_d[3][3] = 1.0 / d[3][3];
	inv_d[4][4] = 1.0 / d[4][4];

	float inv_l_t[5][5];
	transpose5x5(inv_l_t, inv_l);
	float inv_l_t_inv_d[5][5];
	matrixmult(inv_l_t_inv_d, inv_l_t, inv_d);
	matrixmult(inv_hankel, inv_l_t_inv_d, inv_l);
}


void insert(inout float arr[4], float val) {
	float curr = val;
	for (int i = 0; i < 3; i++) {
		if (arr[i] >= curr) {
			float temp = arr[i];
			arr[i] = curr;
			curr = temp;
		}
	}
	if (arr[3] > curr)
		arr[3] = curr;
}

float warp(float x) {
	return (log((x) / (height * (sqrt(height * height + x * x) + height)))) / height;
}

float warpOne(float x) {
	float result = (log((x) / (height * (sqrt(height * height + x * x) + height)))) / height;
	float lb = (log((near) / (height * (sqrt(height * height + near * near) + height)))) / height;
	float ub = (log((far) / (height * (sqrt(height * height + far * far) + height)))) / height;
	return (result - lb) / (ub - lb) * 2.0 - 1.0;
}

//if invertWarp does something wrong
float rtbisWarp(float x1, float x2, float xacc, float at) {
	int JMAX = 50;
	float f = (!one_reduce_only) ? warp(x1) - at : warpOne(x1) - at;
	float fmid = (!one_reduce_only) ? warp(x2) - at : warpOne(x2) - at;
	if (f * fmid >= 0.0) {
		return 0.0;
	}

	float dx, rtb, xmid;

	if (f < 0.0) {
		dx = x2 - x1;
		rtb = x1;
	}
	else {
		dx = x1 - x2;
		rtb = x2;
	}
	for (int j = 0; j < JMAX; j++) {
		dx *= 0.5;
		xmid = rtb + dx;
		fmid = (!one_reduce_only) ?  warp(xmid) - at : warpOne(xmid) - at;
		if (fmid <= 0.0)
			rtb = xmid;

		if ((abs(dx) < xacc) || (fmid == 0.0))
			return rtb;
	}
	return rtb;
}

float invertWarp(float x) {
	return -(2.0 * height * height * exp(height * x)) / (height * height * exp(2.0 * height * x) - 1.0);
}

float invertWarpOne(float mx) {
	float x = mx;
	float lb = (log((near) / (height * (sqrt(height * height + near * near) + height)))) / height;
	float ub = (log((far) / (height * (sqrt(height * height + far * far) + height)))) / height;
	x += 1.0;
	x /= 2.0;
	x *= (ub - lb);
	x += lb;
	return -(2.0 * height * height * exp(height * x)) / (height * height * exp(2.0 * height * x) - 1.0);
}

vec2 invertWarpSplit(vec2 spl, vec2 minMax) {
	vec2 res = vec2(0.0);
	res.x = spl.x * (minMax.y - minMax.x);
	res.y = spl.y * (minMax.y - minMax.x);
	res.x += minMax.x;
	res.y += minMax.x;
	res.x = (!one_reduce_only) ? invertWarp(res.x) : invertWarpOne(res.x);
	res.y = (!one_reduce_only) ? invertWarp(res.y) : invertWarpOne(res.y);
	return res;
}

// Returns value of Binomial Coefficient C(n, k) 
// src: https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/
float binomialCoeff(int nn, int nk)
{
	int k = nk;
	int n = nn;
	float res = 1.0;
	if (k > n - k)
		k = n - k;
	for (int i = 0; i < k; ++i) {
		res *= float(n - i);
		res /= float(i + 1);
	}
	return res;
}

float ipow(float x, int n, int maxBits) {
	float result = 1.0;
	for (int i = maxBits; i >= 0; i--) {
		result *= result;
		if (((n >> i) & 1) == 1) {
			result *= x;
		}
	}
	return result;
}

float binom(vec4 m1, vec4 m2, int exponent, float minimum, float maximum) {
	float d = ipow(maximum - minimum, exponent, 3);
	float sum = (exponent % 2 == 0) ? ipow(minimum, exponent, 3) : -ipow(minimum, exponent, 3);
	for (int i = 0; i < exponent; i++) {
		float momval = (exponent - i - 1 < 4) ? m1[exponent - i - 1] : m2[exponent - i - 5];
		float bc = (i % 2 == 0) ? binomialCoeff(exponent, i) : -binomialCoeff(exponent, i);
		sum += bc * momval * ipow(minimum, i, 3);
	}
	return sum / d;
}


//-----------------------------------------------------------MAIN----------------------------------------------------------------------------------//

void main() {  
	int index = int(gl_LocalInvocationID);
	if (index >= MAX_CASCADES)
		return;
	
	vec4 mom1 = texture(reducedImg, vec2(0.5));
	vec4 mom2 = texture(reducedImg2, vec2(0.5));
	vec3 minmaxones = texture(reducedImgMinMaxOnes, vec2(0.5)).rgb;
	mom1 /= minmaxones.z;
	mom2 /= minmaxones.z;

	if (one_reduce_only) {
		mom2.w = binom(mom1, mom2, 8, minmaxones.x, minmaxones.y);
		mom2.z = binom(mom1, mom2, 7, minmaxones.x, minmaxones.y);
		mom2.y = binom(mom1, mom2, 6, minmaxones.x, minmaxones.y);
		mom2.x = binom(mom1, mom2, 5, minmaxones.x, minmaxones.y);
		mom1.w = binom(mom1, mom2, 4, minmaxones.x, minmaxones.y);
		mom1.z = binom(mom1, mom2, 3, minmaxones.x, minmaxones.y);
		mom1.y = binom(mom1, mom2, 2, minmaxones.x, minmaxones.y);
		mom1.x = binom(mom1, mom2, 1, minmaxones.x, minmaxones.y);
	}

	vec4 b_bias1 = vec4(0, 0.75, 0, 0.676666667);
	vec4 b_bias2 = vec4(0, 0.63, 0, 0.60030303);

	mom1 = (1.0 - moment_bias) * mom1 + moment_bias * b_bias1;
	mom2 = (1.0 - moment_bias) * mom2 + moment_bias * b_bias2;

	//vec4 m1, m2;
	//m1.x = 0.768697559834;
	//m1.y = 0.615222811699;
	//m1.z = 0.501692056656;
	//m1.w = 0.415003746748;
	//m2.x = 0.347507148981;
	//m2.y = 0.294087082148;
	//m2.z = 0.251188784838;
	//m2.w = 0.216289669275;
	//
	//splits[index] = vec2(abs(m1[index] - mom1[index]), abs(m2[index] - mom2[index]));
	//return;

	float l[5][5], d[5][5], inv_hankel[5][5];
	Complex coeff[8];
	computeCholeskey(mom1, mom2, l, d);
	computeInvHankel(inv_hankel, l, d);

	for (int i = 0; i < 8; i++) {
		coeff[i] = Complex(0.0);
	}

	for (int j = 1; j < 5; j++) {
		for (int k = 0; k < 5; k++) {
			coeff[k + j - 1] = coeff[k + j - 1] + Complex(j * inv_hankel[j][k], 0.0);
		}
	}

	Complex sol[7];
	findRoots(sol, coeff);

	int numMinima = 0;
	float minima[4];
	minima[0] = 2.0;
	minima[1] = 2.0;
	minima[2] = 2.0;
	minima[3] = 2.0;
	Complex derivCoeff[7];
	derivPol(derivCoeff, coeff);
		
	for (int i = 0; i < 7; i++) {
		if (abs(sol[i].y) < 0.001) {
			float val = evalPol7(derivCoeff, sol[i]).x;
			if (val <= 0.0) {
				insert(minima, sol[i].x);
				numMinima++;
			}
		}
	}
	//numMinima = 0;
	
	float AreaEPS = 0.001;
	float estimatedCascadeArea[4];
	estimatedCascadeArea[0] = 2.0;
	estimatedCascadeArea[1] = 2.0;
	estimatedCascadeArea[2] = 2.0;
	estimatedCascadeArea[3] = 2.0;
	vec2 nSplits[4];
	nSplits[0] = vec2(2.0);
	nSplits[1] = vec2(2.0);
	nSplits[2] = vec2(2.0);
	nSplits[3] = vec2(2.0);
	vec2 areaFromTo[4];
	areaFromTo[0] = vec2(2.0);
	areaFromTo[1] = vec2(2.0);
	areaFromTo[2] = vec2(2.0);
	areaFromTo[3] = vec2(2.0);


	if (numMinima > 0) {
		for (int i = 0; i < numMinima + 1; i++) {
			float lA = 0.0;
			float rA = 0.0;
			if (i == 0) {
				lA = 0.0;
				rA = approxArea(l, d, mom1, minima[i], 0.5);
				nSplits[i] = vec2(0.0, minima[i]);
			}
			else if (i == numMinima) {
				lA = approxArea(l, d, mom1, minima[i - 1], 0.5);
				rA = 1.0;
				nSplits[i] = vec2(minima[i - 1], 1.0);
			}
			else {
				lA = approxArea(l, d, mom1, minima[i - 1], 0.5);
				rA = approxArea(l, d, mom1, minima[i], 0.5);
				nSplits[i] = vec2(minima[i - 1], minima[i]);
			}
			estimatedCascadeArea[i] = rA - lA;
			areaFromTo[i] = vec2(lA, rA);
		}
	}
	else {
		estimatedCascadeArea[0] = 1.0;
		nSplits[0] = vec2(0.0, 1.0);
		areaFromTo[0] = vec2(0.0, 1.0);
	}

	bool checker = true;

	while (checker) {
		checker = false;

		int numCasc;
		for (numCasc = 3; numCasc >= 0; numCasc--)
			if (estimatedCascadeArea[numCasc] != 2.0)
				break;
		numCasc++;
		for (int i = 0; i < numCasc; i++) {
			if (estimatedCascadeArea[i] < AreaEPS) {
				checker = true;
				int addInd = 0;
				if (i == 0) {
					estimatedCascadeArea[i] += estimatedCascadeArea[1];
					estimatedCascadeArea[1] = 2.0;
					addInd = 1;
				}
				else if (i == numCasc - 1) {
					estimatedCascadeArea[numCasc - 2] += estimatedCascadeArea[i];
					estimatedCascadeArea[i] = 2.0;
					addInd = numCasc - 2;
				}
				else {
					if (estimatedCascadeArea[i - 1] > estimatedCascadeArea[i + 1]) {
						estimatedCascadeArea[i] += estimatedCascadeArea[i + 1];
						estimatedCascadeArea[i + 1] = 2.0;
						addInd = i + 1;
					}
					else {
						estimatedCascadeArea[i - 1] += estimatedCascadeArea[i];
						estimatedCascadeArea[i] = 2.0;
						addInd = i - 1;
					}
				}

				if (addInd == i - 1) {
					areaFromTo[addInd].y = areaFromTo[i].y;
					areaFromTo[i] = vec2(2.0);
				}
				else {
					areaFromTo[i].y = areaFromTo[addInd].y;
					areaFromTo[addInd] = vec2(2.0);
				}

				if (addInd == i - 1) {
					nSplits[addInd].y = nSplits[i].y;
					nSplits[i] = vec2(2.0);
				}
				else {
					nSplits[i].y = nSplits[addInd].y;
					nSplits[addInd] = vec2(2.0);
				}

				if (i < numCasc - 1) {
					if (addInd == i - 1) {
						for (int j = i; j < numCasc - 1; j++) {
							float temp = estimatedCascadeArea[j];
							estimatedCascadeArea[j] = estimatedCascadeArea[j + 1];
							estimatedCascadeArea[j + 1] = temp;

							vec2 tempspl = nSplits[j];
							nSplits[j] = nSplits[j + 1];
							nSplits[j + 1] = tempspl;

							vec2 tempar = areaFromTo[j];
							areaFromTo[j] = areaFromTo[j + 1];
							areaFromTo[j + 1] = tempar;
						}
					}
					else {
						for (int j = i + 1; j < numCasc - 1; j++) {
							float temp = estimatedCascadeArea[j];
							estimatedCascadeArea[j] = estimatedCascadeArea[j + 1];
							estimatedCascadeArea[j + 1] = temp;

							vec2 tempspl = nSplits[j];
							nSplits[j] = nSplits[j + 1];
							nSplits[j + 1] = tempspl;

							vec2 tempar = areaFromTo[j];
							areaFromTo[j] = areaFromTo[j + 1];
							areaFromTo[j + 1] = tempar;
						}
					}
				}
				break;
			}
		}
	}

	int lenEstimatedAr = 0;
	for (lenEstimatedAr = 3; lenEstimatedAr >= 0; lenEstimatedAr--)
		if (estimatedCascadeArea[lenEstimatedAr] != 2.0)
			break;
	lenEstimatedAr++;
	int numOfRemainingSplits = 4 - lenEstimatedAr;

	if (numOfRemainingSplits > 0 && numOfRemainingSplits < 3) {
		int cascadesToSplit_0[2];
		cascadesToSplit_0[0] = -1;
		cascadesToSplit_0[1] = -1;
		float cascadesToSplit_1[2];
		cascadesToSplit_1[0] = 2.0;
		cascadesToSplit_1[1] = 2.0;

		for (int i = 0; i < numOfRemainingSplits; i++) {
			int maxIndex = 0;
			float maxVal = 0.0;

			for (int j = 0; j < lenEstimatedAr; j++) {
				bool elem = false;
				for (int k = 0; k < 2; k++) {
					if (j == cascadesToSplit_0[k]) {
						elem = true;
						break;
					}
				}

				if (!elem && maxVal < estimatedCascadeArea[j]) {
					maxVal = estimatedCascadeArea[j];
					maxIndex = j;
				}
			}

			cascadesToSplit_0[i] = maxIndex;
			cascadesToSplit_1[i] = maxVal;
		}

		int num_cascadesToSplit = numOfRemainingSplits;
		if (numOfRemainingSplits > 1) {
			float tempValCts = cascadesToSplit_1[0] / (numOfRemainingSplits + 1);
			for (int i = 1; i < numOfRemainingSplits; i++)  {
				tempValCts = max(tempValCts, cascadesToSplit_1[i]);
			}

			if (tempValCts < cascadesToSplit_1[0] / 2.0) {
				cascadesToSplit_0[1] = -1;
				cascadesToSplit_1[1] = 2.0;
				num_cascadesToSplit = 1;
			}
		}

		if (num_cascadesToSplit == 1) {
			int ind = cascadesToSplit_0[0];
			for (int i = numOfRemainingSplits - 1; i >= 0; i--) {
				estimatedCascadeArea[ind] = cascadesToSplit_1[0] / (numOfRemainingSplits + 1);
				float temp = estimatedCascadeArea[ind + 1];
				estimatedCascadeArea[ind + 1] = cascadesToSplit_1[0] / (numOfRemainingSplits + 1);
				for (int j = ind + 2; j < 4; j++) {
					float temp2 = estimatedCascadeArea[j];
					estimatedCascadeArea[j] = temp;
					temp = temp2;
				}

				float xval = rtbis(l, d, mom1, 0.0, 1.0, 0.000001, areaFromTo[ind].x + (i + 1) * cascadesToSplit_1[0] / (numOfRemainingSplits + 1));
				vec2 tempspl = nSplits[ind + 1];
				nSplits[ind + 1] = nSplits[ind];
				nSplits[ind].y = xval;
				nSplits[ind + 1].x = xval;
				for (int j = ind + 2; j < 4; j++) {
					vec2 tempspl2 = nSplits[j];
					nSplits[j] = tempspl;
					tempspl = tempspl2;
				}

				vec2 tempar = areaFromTo[ind + 1];
				areaFromTo[ind + 1] = areaFromTo[ind];
				areaFromTo[ind].y = areaFromTo[ind].x + (i + 1) * cascadesToSplit_1[0] / (numOfRemainingSplits + 1);
				areaFromTo[ind + 1].x = areaFromTo[ind].x + (i + 1) * cascadesToSplit_1[0] / (numOfRemainingSplits + 1);
				for (int j = ind + 2; j < 4; j++) {
					vec2 tempar2 = areaFromTo[j];
					areaFromTo[j] = tempar;
					tempar = tempar2;
				}
			}
		}
		else {
			for (int i = 0; i < numOfRemainingSplits; i++) {
				int ind = cascadesToSplit_0[i];
				for (int j = 0; j < 2; j++)
					if (cascadesToSplit_0[j] > ind)
						cascadesToSplit_0[j]++;

				estimatedCascadeArea[ind] = cascadesToSplit_1[i] / 2.0;
				float temp = estimatedCascadeArea[ind + 1];
				estimatedCascadeArea[ind + 1] = cascadesToSplit_1[i] / 2.0;
				for (int j = ind + 2; j < 4; j++) {
					float temp2 = estimatedCascadeArea[j];
					estimatedCascadeArea[j] = temp;
					temp = temp2;
				}

				float xval = rtbis(l, d, mom1, 0.0, 1.0, 0.000001, areaFromTo[ind].x + cascadesToSplit_1[i] / 2.0);
				vec2 tempspl = nSplits[ind + 1];
				nSplits[ind + 1] = nSplits[ind];
				nSplits[ind].y = xval;
				nSplits[ind + 1].x = xval;
				for (int j = ind + 2; j < 4; j++) {
					vec2 tempspl2 = nSplits[j];
					nSplits[j] = tempspl;
					tempspl = tempspl2;
				}

				vec2 tempar = areaFromTo[ind + 1];
				areaFromTo[ind + 1] = areaFromTo[ind];
				areaFromTo[ind].y = areaFromTo[ind].x + +cascadesToSplit_1[i] / 2.0;
				areaFromTo[ind + 1].x = areaFromTo[ind].x + +cascadesToSplit_1[i] / 2.0;
				for (int j = ind + 2; j < 4; j++) {
					vec2 tempar2 = areaFromTo[j];
					areaFromTo[j] = tempar;
					tempar = tempar2;
				}
			}
		}
	}
	else if (numOfRemainingSplits == 3) {
		estimatedCascadeArea[0] = 0.25;
		estimatedCascadeArea[1] = 0.25;
		estimatedCascadeArea[2] = 0.25;
		estimatedCascadeArea[3] = 0.25;
		areaFromTo[0] = vec2(0.0, 0.25);
		areaFromTo[1] = vec2(0.25, 0.5);
		areaFromTo[2] = vec2(0.5, 0.75);
		areaFromTo[3] = vec2(0.75, 1.0);

		for (int i = 0; i < 4; i++) {
			if (i == 0) {
				nSplits[0] = vec2(0.0, rtbis(l, d, mom1, 0.0, 1.0, 0.000001, 0.25));
			}
			else if (i == 3) {
				nSplits[3] = vec2(nSplits[i - 1].y, 1.0);
			}
			else {
				nSplits[i] = vec2(nSplits[i - 1].y, rtbis(l, d, mom1, 0.0, 1.0, 0.000001, 0.25 * (i + 1)));
			}
		}
	}
	
	//splits[index] = vec2(0.0, length(mom1 - m1 + mom2 - m2) * 1000.0);
	//splits[index] = vec2(0.0, length(minmaxones.x - 0.1142578125) * 1000.0);

	splits[index] = invertWarpSplit(nSplits[index], minmaxones.xy);
	//splits[index] = vec2(0.0, abs(nSplits[3].y - 1.0) * 1000.0);
	//splits[index] = nSplits[index];
	//splits[index] = vec2(0.0, abs(estimatedCascadeArea[3] - 0.154277205467) * 1000.0);
	//splits[index] = vec2(0.0, length(nSplits[2] - vec2(0.156175, 0.168644)) * 1000.0);
	//splits[index] = vec2(0.0, abs(rtbis(l, d, mom1, 0.0, 1.0, 0.000001, 0.5) - 0.525606) * 100000.0);
	//splits[index] = vec2(0.0, abs(approxArea(l, d, mom1, 0.12312, 0.5) - 0.111754834652) * 100000.0);
	//splits[index] = vec2(0.0, abs(inv_hankel[3][2] + 126971.476563) * 100000.0);
	//splits[index] = vec2(0.0, abs(minima[1] - 0.439356) * 10000.0);
	//splits[index] = vec2(0.0, length(sol[6] - vec2(-0.653125, -0.000000)) * 100000.0);
	//splits[index] = vec2(0.0, abs((sol - vec2(-0.15459, 0.828074)) * 100000.0).y);
	//splits[index] = vec2(0.0, length(evalPol8(a, sol)) * 100000.0);
	//splits[index] = vec2(0.0, length(solutions[1] - vec2(0.75151923, -0.784615921)) * 10000.0);
	//splits[index] = vec2(0.0, length(solutions[3] - vec2(-0.154590, 0.828074)) * 10000.0);
	//splits[index] = vec2(0.0, length(solutions[4] - vec2(-1.19385911, 0.0)) * 10000.0);
	//splits[index] = vec2(0.0, abs(length(sol)) * 10000.0);
	//splits[index] = vec2(0.0, abs(rtbis(mmm, m, 0.0, 10.0, 0.00001, 256.0) - 8.0) * 10000.0);
}